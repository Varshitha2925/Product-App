{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor() {\n      this._items = new BehaviorSubject([]);\n      this.items$ = this._items.asObservable();\n      this.count$ = this.items$.pipe(map(items => items.reduce((a, i) => a + i.qty, 0)));\n    }\n    add(product, qty = 1) {\n      const items = [...this._items.value];\n      const idx = items.findIndex(i => i.product.id === product.id);\n      if (idx > -1) items[idx].qty += qty;else items.push({\n        product,\n        qty\n      });\n      this._items.next(items);\n    }\n    remove(id) {\n      this._items.next(this._items.value.filter(i => i.product.id !== id));\n    }\n    clear() {\n      this._items.next([]);\n    }\n    static {\n      this.ɵfac = function CartService_Factory(t) {\n        return new (t || CartService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CartService,\n        factory: CartService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}